% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regex.R
\name{getPatternList}
\alias{getPatternList}
\title{Discover regular expressions from string}
\usage{
getPatternList(symbols, skipSinglePattern = TRUE, res = "individual",
  rm.duplicated = FALSE, ignore.case = FALSE, word.boundary = FALSE)
}
\arguments{
\item{symbols}{a list of symbols to discover regular expressions}

\item{skipSinglePattern}{a logical value to select multiple patterns}

\item{res}{type of regex to be created: generic, individual or restricted.
Generic will use the plus sign to represent several occurences
(ex: [a-zA-Z]+[0-9]+), the Individual option will use the specific number of
occurrences (ex: [a-zA-Z]\{2\}[0-9]\{3\}), and the restricted option will use
the minimum and maximum occurences for a type of pattern (ex:
[a-zA-Z]\{2-4\}[0-9]\{1-\}).}

\item{rm.duplicated}{remove duplicated regular expressions}

\item{ignore.case}{whether to differentiate lower/upper cases in the patterns. 
If TRUE, a pattern containing lower and upper case letters will have different expressions,
one for lower case (ex: [a-z]) and one for upper case (ex: [A-Z]).
If FALSE, a patter with lower and upper case letters will have a combined expression such as
[a-zA-Z].}

\item{word.boundary}{logical value to inform whether to surround the regular expressions with 
the word boundary character. This will prevent partial matches.}
}
\value{
A dataframe with list of patterns for the symbols informed
}
\description{
\code{getPatternList} define regular expressions from symbols.
For example, the symbol "SEK-1" will generate the regular expression
"[a-zA-Z]\{3\}[\-][0-9]\{1\}".
}
\details{
The following characters are handled by this function:
" ", "_", ".", "-", "@", ":", "#", "/", "*", "&", "?", ";", "$".
This function requires the package "plyr".
}
\examples{
## getting Patterns List
symbols <- c("p53", "ABP-280", "Hsp90")
patternsList <- getPatternList(symbols,
                               skipSinglePattern = TRUE,
                               res = "individual",
                               rm.duplicated = TRUE,
                               ignore.case = TRUE,
                               word.boundary = FALSE)
patternsList
}
